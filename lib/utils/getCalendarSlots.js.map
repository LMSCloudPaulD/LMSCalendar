{"version":3,"file":"getCalendarSlots.js","sourceRoot":"","sources":["../../src/utils/getCalendarSlots.ts"],"names":[],"mappings":"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","sourcesContent":["\nexport default function getCalendarSlots(events: CalendarEntry[]): CalendarEntry[] {\n  // First, sort the events by start time\n  events.sort((a, b) => {\n    const aStart = a.time.start.hours * 60 + a.time.start.minutes;\n    const bStart = b.time.start.hours * 60 + b.time.start.minutes;\n    return aStart - bStart;\n  });\n\n  // Initialize the slots array with empty slots for each minute of the day\n  const slots: CalendarEntry[][] = [];\n  for (let i = 0; i < 24 * 60; i++) {\n    slots[i] = [];\n  }\n\n  // Go through the events and slot them into the slots array\n  for (const event of events) {\n    const start = event.time.start.hours * 60 + event.time.start.minutes;\n    const end = event.time.end.hours * 60 + event.time.end.minutes;\n    for (let i = start; i < end; i++) {\n      slots[i].push(event);\n    }\n  }\n\n  // Go through the slots and calculate the overlaps and margins for each event\n  for (const slot of slots) {\n    // First, sort the events in the slot by their starting time\n    slot.sort((a, b) => {\n      const aStart = a.time.start.hours * 60 + a.time.start.minutes;\n      const bStart = b.time.start.hours * 60 + b.time.start.minutes;\n      return aStart - bStart;\n    });\n\n    // Then, go through the events in the slot and calculate the overlap and margin for each one\n    for (let i = 0; i < slot.length; i++) {\n      const event = slot[i];\n      let overlap = 0;\n      let margin = 0;\n      for (let j = 0; j < i; j++) {\n        if (slot[j].time.end.hours === event.time.end.hours &&\n            slot[j].time.end.minutes === event.time.end.minutes) {\n          overlap++;\n          margin += (100 / (overlap + 1));\n        }\n      }\n      event.overlap = overlap;\n      event.margin = margin;\n    }\n  }\n\n  return events;\n}"]}