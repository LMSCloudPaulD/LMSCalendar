{"version":3,"file":"partitionOverlappingIntervals.js","sourceRoot":"","sources":["../../src/utils/partitionOverlappingIntervals.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEF,MAAM,CAAC,OAAO,UAAU,6BAA6B,CAAC,SAAqB;IAC1E,MAAM,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IAE5C,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,iDAAiD;IACjD,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE;YAClE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACzB,EAAE,MAAM,CAAC;SACV;aAAM,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE;YAC/B,EAAE,CAAC,CAAC;YACJ,IAAI,EAAE,MAAM,KAAK,CAAC,EAAE;gBAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,GAAG,GAAG,EAAE,CAAC;aACV;SACF;;YAAM,MAAM;KACd;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/** This is an implementation of the sweep-line algorithm\n *  Ref: https://www.baeldung.com/cs/finding-all-overlapping-intervals \\\n *  Example: https://stackoverflow.com/questions/30472556/how-to-find-all-overlapping-ranges-and-partition-them-into-chunks\n */\n\n export default function partitionOverlappingIntervals(intervals: Interval[]) {\n  const rightEndValues = intervals.map((r) => r.end).sort((a, b) => a - b);\n  intervals.sort((a, b) => a.start - b.start);\n\n  let i = 0;\n  let j = 0;\n  let active = 0;\n\n  const groups = [];\n  let cur = [];\n\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    if (i < intervals.length && intervals[i].start < rightEndValues[j]) {\n      cur.push(intervals[i++]);\n      ++active;\n    } else if (j < intervals.length) {\n      ++j;\n      if (--active === 0) {\n        groups.push(cur);\n        cur = [];\n      }\n    } else break;\n  }\n\n  return groups;\n}\n"]}