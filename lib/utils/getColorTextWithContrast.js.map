{"version":3,"file":"getColorTextWithContrast.js","sourceRoot":"","sources":["../../src/utils/getColorTextWithContrast.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,OAAO,UAAU,wBAAwB,CAAC,KAAa;IAC5D,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,IAAI,GAAG,CAAC,CAAC;IAEb,IAAI,KAAK,EAAE;QACT,MAAM,OAAO,GAA4B,KAAK;aAC3C,OAAO,CACN,kCAAkC,EAClC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAC7C;aACA,SAAS,CAAC,CAAC,CAAC;aACZ,KAAK,CAAC,OAAO,CAAC,CAAC;QAElB,IAAI,CAAC,OAAO,EAAE;YACZ,4CAA4C;YAC5C,OAAO,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;SAC3C;QAED,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;KAC1D;IAED,4CAA4C;IAC5C,MAAM,UAAU,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;IAEjE,+CAA+C;IAC/C,MAAM,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;IAC7D,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;IAEtD,MAAM,eAAe,GAAG,OAAO,GAAG,IAAI,KAAK,IAAI,IAAI,GAAG,CAAC;IACvD,MAAM,SAAS,GACb,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC;QAChE,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAC,cAAc,CAAC;IAErB,OAAO,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;AACtC,CAAC","sourcesContent":["export default function getColorTextWithContrast(color: string) {\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (color) {\n    const matches: RegExpMatchArray | null = color\n      .replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (_m, r, g, b) => `#${r}${r}${g}${g}${b}${b}`\n      )\n      .substring(1)\n      .match(/.{2}/g);\n\n    if (!matches) {\n      // Return default background and text colors\n      return ['rgb(255,255,255)', 'rgb(0,0,0)'];\n    }\n\n    [red, green, blue] = matches.map((x) => parseInt(x, 16));\n  }\n\n  // Calculate brightness of randomized colour\n  const brightness = (red * 299 + green * 587 + blue * 114) / 1000;\n\n  // Calculate brightness of white and black text\n  const lightText = (255 * 299 + 255 * 587 + 255 * 114) / 1000;\n  const darkText = (0 * 299 + 0 * 587 + 0 * 114) / 1000;\n\n  const backgroundColor = `rgb(${red},${green},${blue})`;\n  const textColor =\n    Math.abs(brightness - lightText) > Math.abs(brightness - darkText)\n      ? 'rgb(255, 255, 255)'\n      : 'rgb(0, 0, 0)';\n\n  return [backgroundColor, textColor];\n}\n"]}